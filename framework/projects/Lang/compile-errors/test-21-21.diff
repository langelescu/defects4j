diff --git a/src/main/java/org/apache/commons/lang3/JavaVersion.java b/src/main/java/org/apache/commons/lang3/JavaVersion.java
index b7c033ef4..ef3420c34 100644
--- a/src/main/java/org/apache/commons/lang3/JavaVersion.java
+++ b/src/main/java/org/apache/commons/lang3/JavaVersion.java
@@ -34,7 +34,17 @@ public enum JavaVersion {
     JAVA_1_5(1.5f, "1.5"), 
     JAVA_1_6(1.6f, "1.6"), 
     JAVA_1_7(1.7f, "1.7"),
-    JAVA_1_8(1.8f, "1.8");
+    JAVA_1_8(1.8f, "1.8"),
+
+    /**
+     * Java 1.9.
+     */
+    JAVA_1_9(1.9f, "1.9"),
+
+    /**
+     * Java 1.x, x > 9. Mainly introduced to avoid to break when a new version of Java is used.
+     */
+    JAVA_RECENT(maxVersion(), Float.toString(maxVersion()));
 
     private float value;
     private String name;
@@ -90,8 +100,42 @@ public enum JavaVersion {
         } else
         if("1.8".equals(nom)) {
             return JAVA_1_8;
-        } else {
+        } else if ("1.9".equals(nom)) {
+            return JAVA_1_9;
+        }
+        if (nom == null) {
             return null;
         }
+        final float v = toFloatVersion(nom);
+        if ((v - 1.) < 1.) { // then we need to check decimals > .9
+            final int firstComma = Math.max(nom.indexOf('.'), nom.indexOf(','));
+            final int end = Math.max(nom.length(), nom.indexOf(',', firstComma));
+            if (Float.parseFloat(nom.substring(firstComma + 1, end)) > .9f) {
+                return JAVA_RECENT;
+            }
+        }
+        return null;
     }
+
+    // upper bound of java version considering 2. or current is the higher
+    private static float maxVersion() {
+        final float v = toFloatVersion(System.getProperty("java.version", "2.0"));
+        if (v > 0) {
+            return v;
+        }
+        return 2f;
+    }
+
+    private static float toFloatVersion(final String name) {
+        final String[] toParse = name.split("\\.");
+        if (toParse.length >= 2) {
+            try {
+                return Float.parseFloat(toParse[0] + '.' + toParse[1]);
+            } catch (final NumberFormatException nfe) {
+                // no-op, let use default
+            }
+        }
+        return -1;
+    }
+
 }
